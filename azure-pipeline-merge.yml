trigger:
  - main

pool:
  vmImage: 'windows-latest'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    version: '8.0.204'
    performMultiLevelLookup: true

- script: dotnet workload restore src/EventLogExpert.sln
  displayName: 'dotnet workload restore'

- script: dotnet test src/EventLogExpert.sln
  displayName: 'dotnet test'

- pwsh: |
    $now = [DateTime]::UtcNow
    $versionString = "$($now.ToString(`"y.M.d`")).$($now.Hour * 60 + $now.Minute)"
    Write-Host "##vso[task.setvariable variable=ReleaseVersion]$versionString"
    Write-Host $versionString
  displayName: 'create version string'

- pwsh: |
    echo "ReleaseVersion: $(ReleaseVersion)"
    [xml]$manifest = Get-Content -Raw "src\EventLogExpert\Platforms\Windows\Package.appxmanifest"
    $manifest.Package.Identity.Version = "$(ReleaseVersion)"
    $manifest.Save("src\EventLogExpert\Platforms\Windows\Package.appxmanifest")
    Get-Content "src\EventLogExpert\Platforms\Windows\Package.appxmanifest"
  displayName: 'set version in manifest'

- pwsh: >
    dotnet publish src/EventLogExpert.EventDbTool/EventLogExpert.EventDbTool.csproj `
    --self-contained `
    -c Release `
    -o "$(build.artifactStagingDirectory)" `
    -p:IncludeNativeLibrariesForSelfExtract=true `
    -p:PublishSingleFile=true `
    -p:Version=$(ReleaseVersion)
  displayName: 'dotnet publish EventDbTool'

- pwsh: >
    dotnet publish src/EventLogExpert/EventLogExpert.csproj `
    -c Release `
    -f net8.0-windows10.0.19041.0 `
    -p:AppxBundle=Never `
    -p:AppInstallerCheckForUpdateFrequency=OnApplicationRun `
    -p:AppInstallerUpdateFrequency=1 `
    -p:AppInstallerUri="https://github.com/microsoft/EventLogExpert/releases/latest/download/" `
    -p:GenerateAppInstallerFile=true `
    -p:OutputPath="$(build.artifactStagingDirectory)\AppInstaller\" `
    -p:RuntimeIdentifierOverride=win10-x64 `
    -p:UapAppxPackageBuildMode=SideLoadOnly `
    -p:Version=$(ReleaseVersion)
  displayName: 'dotnet publish EventLogExpert'

- pwsh: |
    Get-ChildItem -Recurse "$(build.artifactStagingDirectory)"
  displayName: 'show all files'

- pwsh: |
    Get-ChildItem "$(build.artifactStagingDirectory)\AppInstaller\AppPackages\*.appinstaller" | % { Move-Item $_ "$(build.artifactStagingDirectory)" }
    $msixFolder = Get-ChildItem "$(build.artifactStagingDirectory)\AppInstaller\AppPackages\" -Directory
    echo "msixFolder: $msixFolder"
    Get-ChildItem $msixFolder *.msix | % { Move-Item $_ "$(build.artifactStagingDirectory)" }
    Get-ChildItem (Join-Path $msixFolder "\Dependencies\x64\") *.msix | % { Move-Item $_ "$(build.artifactStagingDirectory)" }
  displayName: 'move msix to staging directory'

- pwsh: |
    Get-ChildItem "$(build.artifactStagingDirectory)"
  displayName: 'show staging directory'

- pwsh: |
    $appInstallerFile = Get-Item "$(build.artifactStagingDirectory)\*.appinstaller"
    [xml]$appinstaller = Get-Content -Raw $appInstallerFile
    $appInstaller.AppInstaller.MainPackage.Uri = $appInstaller.AppInstaller.MainPackage.Uri -replace "/download/(.*)/", "/download/"
    $appInstaller.AppInstaller.Dependencies.Package.Uri = $appInstaller.AppInstaller.Dependencies.Package.Uri -replace "/download/(.*)/", "/download/"
    $appInstaller.Save($appInstallerFile)
    Get-Content $appInstallerFile
  displayName: 'update appinstaller paths'
