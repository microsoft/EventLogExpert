@using EventLogExpert.UI
@using EventLogExpert.UI.Models

<div class="flex-space-between">
    <div class="flex-align-center">
        @if (Value.IsEditing)
        {
            <ValueSelect CssClass="@($"input color-dropdown {Value.Color.ToString().ToLower()}")" T="HighlightColor" @bind-Value="Value.Color">
                @foreach (HighlightColor item in Enum.GetValues(typeof(HighlightColor)))
                {
                    <ValueSelectItem CssClass="@($"color-dropdown-item {item.ToString().ToLower()}")" T="HighlightColor" Value="item" />
                }
            </ValueSelect>

            <span>Cache Type: </span>
            <ValueSelect CssClass="input filter-dropdown" T="CacheType" @bind-Value="_cacheType" ToStringFunc="x => x.ToFullString()">
                @foreach (CacheType item in Enum.GetValues(typeof(CacheType)))
                {
                    <ValueSelectItem T="CacheType" Value="item" />
                }
            </ValueSelect>

            <span>Value: </span>
            <ValueSelect CssClass="input cache-dropdown" T="string" @bind-Value="_filterValue" IsInput>
                @if (Items.Any())
                {
                    @foreach (var item in Items)
                    {
                        <ValueSelectItem T="string" Value="item" />
                    }
                }
                else
                {
                    <ValueSelectItem T="string" IsDisabled />
                }
            </ValueSelect>
        }
        else
        {
            @if (Value.Color != HighlightColor.None)
            {
                <div class="mx-2 @($"color-box {Value.Color.ToString().ToLower()}")"></div>
            }

            @if (Value.IsExcluded)
            {
                <span>Exclude: @Value.Comparison.Value</span>
            }
            else
            {
                <span>@Value.Comparison.Value</span>
            }
        }
    </div>

    <div class="justify-self-right">
        @if (Value.IsEditing)
        {
            <button class="button button-green" @onclick="SaveFilter">
                <i class="bi bi-check-circle"></i> Save
            </button>

            <button class="button button-red fixed-width" @onclick="RemoveFilter">
                <i class="bi bi-dash-circle"></i> Remove
            </button>
        }
        else
        {
            <button class="button" @onclick="EditFilter">
                <i class="bi bi-funnel"></i> Edit
            </button>

            @if (Value.IsExcluded)
            {
                <button class="button fixed-width" @onclick="ToggleFilterExclusion">
                    <i class="bi bi-plus-circle"></i> Include
                </button>
            }
            else
            {
                <button class="button fixed-width" @onclick="ToggleFilterExclusion">
                    <i class="bi bi-dash-circle"></i> Exclude
                </button>
            }

            <button class="button button-red fixed-width" @onclick="RemoveFilter">
                <i class="bi bi-dash-circle"></i> Remove
            </button>

            @if (Value.IsEnabled)
            {
                <button class="button button-red fixed-width" @onclick="ToggleFilter">
                    <i class="bi bi-dash-circle"></i> Disable
                </button>
            }
            else
            {
                <button class="button button-green fixed-width" @onclick="ToggleFilter">
                    <i class="bi bi-plus-circle"></i> Enable
                </button>
            }
        }
    </div>
</div>

<div hidden="@(string.IsNullOrWhiteSpace(_errorMessage))">
    <span class="advanced-filter-error">@_errorMessage</span>
</div>
