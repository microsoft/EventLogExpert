@using EventLogExpert.UI
@inherits FluxorComponent

<SplitLogTabPane />

<div class="table-container">
    <table id="eventTable" @onkeydown="HandleKeyDown">
        <thead @oncontextmenu="InvokeTableColumnMenu">
        <tr>
            @foreach ((ColumnName column, bool _) in _eventTableState.Columns.Where(column => column.Value))
            {
                <th class="@column.ToString().ToLower()">
                    @if (column == ColumnName.DateAndTime)
                    {
                        <text>@GetDateColumnHeader()</text>
                    }
                    else
                    {
                        @column.ToFullString()
                    }
                    @if (_eventTableState.OrderBy == column)
                    {
                        <span class="menu-toggle" data-rotate="@_eventTableState.IsDescending.ToString().ToLower()" @onclick="ToggleSorting">
                            <i class="bi bi-caret-up"></i>
                        </span>
                    }
                </th>
            }

            <th class="description">Description</th>
        </tr>
        </thead>
        <tbody @oncontextmenu="InvokeContextMenu">
        @if (_currentTable is not null)
        {
            <Virtualize Context="evt" Items="_currentTable.DisplayedEvents">
                <tr class="@GetCss(evt)" @key="@($"{evt.OwningLog}_{evt.RecordId}")"
                    @onmouseenter="args => DragSelectEvent(args, evt)" @onmousedown="args => SelectEvent(args, evt)" tabindex="0">
                    @foreach ((ColumnName column, bool _) in _eventTableState.Columns.Where(column => column.Value))
                    {
                        <td>
                            @switch (column)
                            {
                                case ColumnName.Level:
                                    <text><span class="@GetLevelClass(evt.Level)"></span> @evt.Level</text>
                                    break;
                                case ColumnName.DateAndTime:
                                    @evt.TimeCreated.ConvertTimeZone(_timeZoneSettings)
                                    break;
                                case ColumnName.ActivityId:
                                    @evt.ActivityId
                                    break;
                                case ColumnName.Log:
                                    @evt.OwningLog.Split("\\").Last()
                                    break;
                                case ColumnName.ComputerName:
                                    @evt.ComputerName
                                    break;
                                case ColumnName.Source:
                                    @evt.Source
                                    break;
                                case ColumnName.EventId:
                                    @evt.Id
                                    break;
                                case ColumnName.TaskCategory:
                                    @evt.TaskCategory
                                    break;
                                case ColumnName.Keywords:
                                    <text>@string.Join(", ", evt.KeywordsDisplayNames)</text>
                                    break;
                                case ColumnName.ProcessId:
                                    @evt.ProcessId
                                    break;
                                case ColumnName.ThreadId:
                                    @evt.ThreadId
                                    break;
                                case ColumnName.User:
                                    @evt.UserId
                                    break;
                            }
                        </td>
                    }

                    <td>@evt.Description</td>
                </tr>
            </Virtualize>
        }
        </tbody>
    </table>
</div>
