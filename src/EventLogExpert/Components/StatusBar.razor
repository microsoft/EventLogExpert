@using EventLogExpert.UI.Store.EventLog
@using EventLogExpert.UI.Store.EventTable
@using EventLogExpert.UI.Store.FilterPane
@using EventLogExpert.UI.Store.StatusBar
@using EventLogExpert.UI
@inherits FluxorComponent

@inject IState<EventLogState> EventLogState
@inject IState<EventTableState> EventTableState
@inject IState<FilterPaneState> FilterPaneState
@inject IState<StatusBarState> StatusBarState

<div class="status-bar">
    @foreach (var loadingProgress in StatusBarState.Value.EventsLoading)
    {
        <span>Loading: @loadingProgress.Value</span>
    }

    <span>Events Loaded: @EventLogState.Value.ActiveLogs.Values.Sum(log => log.Events.Count)</span>

    @if (EventTableState.Value.ActiveEventLogId is not null && FilterMethods.IsFilteringEnabled(EventLogState.Value.AppliedFilter))
    {
        var activeTable = EventTableState.Value.EventTables.FirstOrDefault(table => table.Id == EventTableState.Value.ActiveEventLogId);

        if (activeTable is null) { return; }

        var totalEvents = activeTable.IsCombined ?
            EventLogState.Value.ActiveLogs.Sum(l => l.Value.Events.Count) :
            EventLogState.Value.ActiveLogs[activeTable.LogName].Events.Count;

        var filteredEvents = activeTable.DisplayedEvents.Count;

        <span>Visible: @(filteredEvents) Hidden by filter: @(totalEvents - filteredEvents)</span>
    }

    @if (EventLogState.Value.ActiveLogs.Values.Any(l => l.Type == PathType.LogName))
    {
        @if (EventLogState.Value.ContinuouslyUpdate)
        {
            <span>Continuously Updating</span>
        }
        else
        {
            <span>New Events: @EventLogState.Value.NewEventBuffer.Count</span>

            @if (EventLogState.Value.NewEventBufferIsFull)
            {
                <span>Buffer Full</span>
            }
        }
    }

    @if (!string.IsNullOrEmpty(StatusBarState.Value.ResolverStatus))
    {
        <span>@StatusBarState.Value.ResolverStatus</span>
    }
</div>
